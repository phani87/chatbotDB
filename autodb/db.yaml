metadata:
  platformVersion: "1.0"
main: true
name: "AutoDBBot"
context:
  variables:
    dbtype: "DBType"
    adbtype : "ADBType"
    adbstorage: "string"
    adbocpus: "string"
    adbname : "string"
    adbusername : "AdbUsername"
    adbdisplayname : "string"
    
    dbusername: "string"
    dbpasswd : "string"
    adbpasswd : "string"
    dbdisplayname: "string"
    abltydomainslist : "string"
    selectedabltydomains : "string"
   
    dbedition : "DBEdition"
    seleteddbedition : "string"
    dbshape : "string"
    selecteddbshape : "string"
    dbname : "string"
    dbbackup : "DBBackup"
    dbhostname : "string"
    dbversion : "string"
    selecteddbversion : "string"
    subnets : "string"
    selectedsubnets : "string"
    dbssh : "string"
    dbInitialStorage : "string"
    
    answer: "answer"
    dblist: "string"
    dbchkstatus : "string"
    iResult: "nlpresult"
states:
  Greeting:
    component: System.Output
    transitions:
      next: intent
    properties:
      text:  "Hello ${profile.firstName} ${profile.lastName}, how can I help you today?"
    transitions: {}
  intent:
    component: "System.Intent"
    properties:
      variable: "iResult"
      confidenceThreshold: 0.4
      optionsPrompt: "Hey, what can I do for you?"   
    transitions:
      actions:
        StartDBProvisioning: "startdb"
        CheckStatus : "listDbstatus"
        CancelProvisioning: "canceldb"
        unresolvedIntent: "unresolved"
  startdb:
    component: "System.List"
    properties:
      options: "${answer.type.enumValues}"
      prompt: "Do you want to start DB provisioning ?"
      variable : "answer"
    transitions: 
      actions:
        checktostart: "checktostart"
  checktostart:
    component: "System.ConditionEquals"
    properties:
      variable: "answer"
      source : "${answer.value}"
      value: "No"
    transitions:
      actions:
        equal: "canceldb"
        notequal: "getDbtype"
  getDbtype:
    component: "System.List"
    properties:
      options: "${dbtype.type.enumValues}"
      prompt: "What type of DB you want to provision ?"
      variable: "dbtype"
    transitions: {}
  conditionEquals:
    component: "System.ConditionEquals"
    properties:
      variable: "dbtype" 
      source: "${dbtype.value}"
      value: "Database on VM"
    transitions:
      actions:
        equal: "getDbDisplayname" 
        notequal: "getADbtype"
  getADbtype:
    component: "System.List"
    properties:
      options: "${adbtype.type.enumValues}"
      prompt: "What type of ADB you want to provision ?"
      variable: "adbtype"
    transitions: {}
  getAdbDisplayname:
    component: "System.Text"
    properties:
      prompt: "What is the display name of your Autonomous DB?"
      variable: "adbdisplayname"
    transitions: {}
  getAdbname:
    component: "System.Text"
    properties:
      prompt: "What is name of your Autonomous DB?"
      variable: "adbname"
    transitions: {}
  getADbocpus :
    component: "System.Text"
    properties:
      prompt: "How many OCPUs? Note: Max OCPUs <= 128"
      variable: "adbocpus"
    transitions: {}
  getADbstorage :
    component: "System.Text"
    properties:
      prompt: "How much Storage? Note: Max Storage <= 128 TB"
      variable: "adbstorage"
    transitions: {}
  getAdbusername:
    component: "System.Text"
    properties:
      prompt: "Your ADB username is admin"
      variable: "adbusername"
    transitions: {}
  getAdbpwd :
    component: "System.Text"
    properties:
      prompt: "Set you DB admin password. It has to be 12 characters long, 2 Capital Letters, 2 Small Letters, 2 Special Characters. ex. WElcome12_34#"
      variable: "adbpasswd"
    transitions: {}
  adbprovision:
    component: startadbprovision 
    properties:
      adbtype: "${adbtype.value}"
      adbdisplayname : "${adbdisplayname.value}"
      adbname: "${adbname.value}"
      adbocpus: "${adbocpus.value}"
      adbstorage: "${adbstorage.value}"
      adbusername: "${adbusername.value}"
      adbpasswd : "${adbpasswd.value}"
    transitions: 
      next: "phani"
      
  listDbstatus:
    component : "System.List"
    properties:
      options: "${dbtype.type.enumValues}"
      prompt: "Check status for which kind of database ?"
      variable : "dbtype"
    transitions: {}
  checkADbtype:
    component: "System.List"
    properties:
      options: "${adbtype.type.enumValues}"
      prompt: "What kinda ADB you want to check ?"
      variable: "adbtype"
    transitions: {}
  listAllStatus:
    component: listAllDatabases 
    properties:
      dbtype: "${adbtype.value}"
    transitions: {}
  dblists :
    component : "System.List"
    properties :
      options : "${dblist.value}"
      prompt: "Select the database for more details"
      variable : "dbchkstatus"
    transitions: 
        next: "phani"
      

#Database on VM

  getDbDisplayname:
    component: "System.Text"
    properties:
      prompt: "What is the display name of the Database?"
      variable: "dbdisplayname"
    transitions: {}
    
  getAvailabilityDomains:
    component: listAvailabilityDomains
    transitions: {}
  showAvailablityDomains :
    component : "System.List"
    properties :
      options : "${abltydomainslist.value}"
      prompt: "Select the Availability Domain"
      variable : "selectedabltydomains"
    transitions: {}
    
  getDbShapes:
    component: listDbShapes
    properties:
       selectedabltydomains: "${selectedabltydomains.value}"
    transitions: {}
  showDbShapes :
    component : "System.List"
    properties :
      options : "${dbshape.value}"
      prompt: "Select DB Shape"
      variable : "selecteddbshape"
    transitions: {}
    
  
  getDbEdition :
    component : "System.List"
    properties :
      options : "${dbedition.type.enumValues}"
      prompt: "Select DB Edition"
      variable : "seleteddbedition"
    transitions: {}
    
  getDbName:
    component : "System.Text"
    properties :
      prompt: "Set DB Name"
      variable : "dbname"
    transitions: {}
  
  getDbpwd :
    component: "System.Text"
    properties:
      prompt: "Set you DB admin password. It has to be 12 characters long, 2 Capital Letters, 2 Small Letters, 2 Special Characters. ex. WElcome12_34#"
      variable: "dbpasswd"
    transitions: {}
  
  getDbBackup:
    component : "System.List"
    properties :
      options : "${dbbackup.type.enumValues}"
      prompt: "Do you want DB Backup"
      variable : "dbbackup"
    transitions: {}
 
  getHostNamePrefix :
    component: "System.Text"
    properties:
      prompt: "Set hostname"
      variable: "dbhostname"
    transitions: {}
  
  getDbVersion:
    component: listDbVersion
    properties:
      selecteddbshape : "${selecteddbshape.value}"
    transitions: {}
  showDbVersions :
    component : "System.List"
    properties :
      options : "${dbversion.value}"
      prompt: "Select DB Version"
      variable : "selecteddbversion"
    transitions: {}
    
  getSubnet:
    component: listSubnets
    transitions: {}
  showSubnets :
    component : "System.List"
    properties :
      options : "${subnets.value}"
      prompt: "Select Subnets"
      variable : "selectedsubnets"
    transitions: {}
  
  getSSH :
    component: "System.Text"
    properties:
      prompt: "Set SSH public key. Copy paste the private key here."
      variable: "dbssh"
    transitions: {}
    
  getInitialStorage :
    component: "System.Text"
    properties:
      prompt: "Set Initial Storage. Choose from 256, 512, 1024, 2048, 4096"
      variable: "dbInitialStorage"
    transitions: {}
  
  createDB: 
    component: createDb
    properties:
      selectedabltydomains : "${selectedabltydomains.value}" 
      seleteddbedition : "${seleteddbedition.value}" 
      dbpasswd : "${dbpasswd.value}" 
      dbname : "${dbname.value}" 
      dbbackup : "${dbbackup.value}" 
      selecteddbversion : "${selecteddbversion.value}" 
      dbdisplayname : "${dbdisplayname.value}" 
      dbhostname : "${dbhostname.value}" 
      selecteddbshape : "${selecteddbshape.value}" 
      selectedsubnets : "${selectedsubnets.value}" 
      dbssh : "${dbssh.value}"
      dbInitialStorage : "${dbInitialStorage.value}"
    transitions: {}
  
 
  
   
# Continue the flow   
  phani:
    component: "System.Output" 
    properties:
      text: "Do you want something else?"
    transitions:
      return: "intent"
  canceldb:
    component: "System.Output"
    properties:
      text: "Your DB provisioning is stopped"
    transitions:
      return: "canceldb"
  unresolved:
    component: "System.Output"
    properties:
      text: "I don't understand. What do you want to do?"
    transitions:
      return: "unresolved"